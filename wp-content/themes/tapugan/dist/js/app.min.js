"use strict";window.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(n){window.setTimeout(n,1e3/60)}}(),$(function(){var n=[[2,0,0,0],[2,0,0,0],[0,0,0,0],[0,0,0,0]];$(function(){$(".game").each(function(){new t($(this))}),$(".mountains").each(function(){new o($(this))}),$(document).on("mailsent.wpcf7",function(){$(".site__content").addClass("contact-send")})});var o=function(n){var o=n,t=($("body"),o.find(".mountains__mountain")),e=o.find(".mountains__potatoes"),r=function(){o.on({mousemove:function(n){var o=(n.pageX,n.pageY);a(t,0,o,.02),a(e,0,o,.04)}})},a=function(n,o,t,e){var r="translate3d("+Math.round(o*e)+"px, "+Math.round(t*e)+"px, 0px )";n.css({transform:r})},i=function(n){r()};i()},t=function(o){var t=o,e=$(window),r=t.find(".game__item span"),a=2,i=2,f=2,c=t.find(".game__highscore dd"),u=t.find(".game__score dd"),s=t.find(".game__clear-highscore"),m=function(){e.on({keyup:function(n){var o=n.keyCode;switch(o){case 37:p();break;case 38:w();break;case 39:A();break;case 40:_()}g()}}),s.on({click:function(){return window.localStorage.clear(),location.reload(),!1}})},v=function q(){if(h()){var o=x(0,3),t=x(0,3);n[t][o]<1?n[t][o]=2:q()}},h=function(){for(var o=0;o<4;o++)for(var t=0;t<4;t++)if(0==n[t][o])return!0;d()},d=function(){i>f?alert("GAME OVER.\nCONGRATELATION YOU NEW RECORD IS: "+i):alert("GAME OVER"),n=[[2,0,0,0],[2,0,0,0],[0,0,0,0],[0,0,0,0]],i=2,k(),l(),g()},l=function(){a=localStorage.getItem("highScore")?localStorage.getItem("highScore"):2,f=a},g=function(){for(var o=0;o<4;o++)for(var t=0;t<4;t++)n[t][o]>i&&(i=n[t][o]);i>a&&(a=i),localStorage.setItem("highScore",a),u.text(i),c.text(a)},w=function(){for(var o=[],t=0,e=0;e<4;e++){for(var r=0;r<4;r++)n[r][e]>0&&(o[t]=n[r][e],t++);o=R(o,!1);for(var a=0;a<4;a++)o[a]?n[a][e]=o[a]:n[a][e]=0;S(o)}v(),k()},_=function(){for(var o=[],t=0,e=0;e<4;e++){for(var r=0;r<4;r++)n[r][e]>0&&(o[t]=n[r][e],t++);o=R(o,!0);for(var a=0;a<4;a++)o[a]?n[a][e]=o[a]:n[a][e]=0;S(o)}v(),k()},p=function(){for(var o=[],t=0,e=0;e<4;e++){for(var r=0;r<4;r++)n[e][r]>0&&(o[t]=n[e][r],t++);o=R(o,!1);for(var a=0;a<4;a++)o[a]?n[e][a]=o[a]:n[e][a]=0;S(o)}v(),k()},A=function(){for(var o=[],t=0,e=0;e<4;e++){for(var r=0;r<4;r++)n[e][r]>0&&(o[t]=n[e][r],t++);o=R(o,!0);for(var a=0;a<4;a++)o[a]?n[e][a]=o[a]:n[e][a]=0;S(o)}v(),k()},R=function(n,o){var t=[];if(n.length>1){if(o)for(var e=n.length-1;e>=0;e--)n[e]==n[e+1]&&(n[e+1]=n[e]+n[e+1],n[e]=0);else for(var e=1;e<n.length;e++)n[e]==n[e-1]&&(n[e-1]=n[e]+n[e-1],n[e]=0);for(var e=0;e<n.length;e++)n[e]>0&&(t[t.length]=n[e])}else t=n;if(o)for(;t.length<4;)t.unshift(0);else for(;t.length<4;)t.push(0);return t},S=function(n){for(var o=0;o<n.length;o++)n[o]=0},k=function(){var o=0,t=0;r.each(function(){var e=$(this);n[o][t]>0?e.text(n[o][t]):e.text(""),t<3?t++:(t=0,o++)})},x=function(n,o){return Math.floor(Math.random()*(o-n+1))+n},E=function(){k(),m(),l(),g()};E()}});
//# sourceMappingURL=data:application/json;base64,
